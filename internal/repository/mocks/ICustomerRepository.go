// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ebookstore/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ICustomerRepository is an autogenerated mock type for the ICustomerRepository type
type ICustomerRepository struct {
	mock.Mock
}

// GetCustomerByEmail provides a mock function with given fields: ctx, email
func (_m *ICustomerRepository) GetCustomerByEmail(ctx context.Context, email string) (*model.Customer, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByEmail")
	}

	var r0 *model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Customer, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Customer); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, customer
func (_m *ICustomerRepository) Register(ctx context.Context, customer *model.Customer) (uint, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Customer) (uint, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Customer) uint); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Customer) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICustomerRepository creates a new instance of ICustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICustomerRepository {
	mock := &ICustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
