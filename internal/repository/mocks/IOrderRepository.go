// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ebookstore/internal/model"

	mock "github.com/stretchr/testify/mock"

	transactioner "ebookstore/utils/transactioner"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: ctx, tx, item
func (_m *IOrderRepository) CreateItem(ctx context.Context, tx transactioner.TxxProvider, item model.Item) error {
	ret := _m.Called(ctx, tx, item)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transactioner.TxxProvider, model.Item) error); ok {
		r0 = rf(ctx, tx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, tx, order
func (_m *IOrderRepository) CreateOrder(ctx context.Context, tx transactioner.TxxProvider, order model.Order) (uint, error) {
	ret := _m.Called(ctx, tx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transactioner.TxxProvider, model.Order) (uint, error)); ok {
		return rf(ctx, tx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transactioner.TxxProvider, model.Order) uint); ok {
		r0 = rf(ctx, tx, order)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, transactioner.TxxProvider, model.Order) error); ok {
		r1 = rf(ctx, tx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemsByOrderID provides a mock function with given fields: ctx, orderID
func (_m *IOrderRepository) GetItemsByOrderID(ctx context.Context, orderID uint) ([]model.Item, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByOrderID")
	}

	var r0 []model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]model.Item, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []model.Item); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderHistoryByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *IOrderRepository) GetOrderHistoryByCustomerID(ctx context.Context, customerID uint) ([]model.Order, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderHistoryByCustomerID")
	}

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]model.Order, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []model.Order); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderByOrderID provides a mock function with given fields: ctx, tx, order
func (_m *IOrderRepository) UpdateOrderByOrderID(ctx context.Context, tx transactioner.TxxProvider, order model.Order) error {
	ret := _m.Called(ctx, tx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderByOrderID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transactioner.TxxProvider, model.Order) error); ok {
		r0 = rf(ctx, tx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
