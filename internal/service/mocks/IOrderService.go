// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	request "ebookstore/internal/model/request"

	mock "github.com/stretchr/testify/mock"

	response "ebookstore/internal/model/response"
)

// IOrderService is an autogenerated mock type for the IOrderService type
type IOrderService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, req
func (_m *IOrderService) CreateOrder(ctx context.Context, req request.CreateOrder) (response.CreateOrderData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 response.CreateOrderData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateOrder) (response.CreateOrderData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateOrder) response.CreateOrderData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.CreateOrderData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CreateOrder) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserOrders provides a mock function with given fields: ctx
func (_m *IOrderService) GetUserOrders(ctx context.Context) ([]response.OrderData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrders")
	}

	var r0 []response.OrderData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]response.OrderData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []response.OrderData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.OrderData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOrderService creates a new instance of IOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderService {
	mock := &IOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
